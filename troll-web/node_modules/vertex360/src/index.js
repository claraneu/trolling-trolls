var Vertex = require('./vertex/Vertex')
var Router = require('./vertex/Router')
var APIRouter = require('./vertex/APIRouter')
var Controller = require('./vertex/Controller')
var TaskMgr = require('./vertex/TaskMgr')
var ConfigRouter = require('./vertex/ConfigRouter')
// var PaypalClient = require('./vertex/PaypalClient')
var utils = require('./vertex/utils')
var local = require('./vertex/local')
var db = require('./vertex/db')
var entry = require('./vertex/entry')
var expressConfig = require('./vertex/express-config')

var Microservice = function(credentials){
	const BASE_URL = 'https://api.turbo360.co'
	const TURBO_URL = 'https://www.turbo360.co'

	var config = {
		site_id: credentials['site_id'],
		turbo_url: TURBO_URL, // for fetching turbo dashboard resources (site, profile, etc)
		base_url: BASE_URL
	}

	var vertexApp = function(opts){ // opts can be null
		const keys = Object.keys(process.env)
		keys.forEach(function(key, i) {
			if (key.indexOf('AWS_') != -1)
				delete process.env[key]
		})

		delete process.env['PATH']
		delete process.env['_HANDLER']
		delete process.env['LD_LIBRARY_PATH']
		delete process.env['LAMBDA_TASK_ROOT']
		delete process.env['LAMBDA_RUNTIME_DIR']

		if (process.env.TURBO_ENV == 'prod'){ // this is null in production
			var app = new Vertex(opts)
			return app
		}

		var app = local.app(opts)
		return app
	}

	var router = function(){
		// if (process.env.TURBO_ENV == 'prod'){ // this is null in production
		// 	var router = new Router()
		// 	return router
		// }

		// 05/30/2020:
		// Always use the express router because prod
		// deployments now run pure express framework
		var router = local.router()
		return router
	}

	// middleware function for fetching global config:
	var fetchGlobal = function(apiKey, env, turboSDK){
		return function(req, res, next) {
			req.appSlug = req.headers['Turbo-Vertex-App']
			turboSDK.globalConfig(apiKey, env)
			.then(function(globalConfig) {
				req.global = globalConfig
				next()
			})
			.catch(function(err) {
				next()
			})
		}
	}

	var setConfig = function(env){
		return function(req, res, next) {
			// var vtxUser = (req.vertexSession) ? req.vertexSession.user : null
			var vtxUser = (req.vertexSession) ? req.vertexSession.vertexUser : null
		    var preloaded = {
				vertexUser: vtxUser
			}

			// if (env.TURBO_APP_ID!=null && env.TURBO_APP_SLUG!=null){
            if (utils.isValidApp(env) == null){
		        var site = {
					id:env.TURBO_APP_ID,
					slug:env.TURBO_APP_SLUG,
					schema:'site',
					url: req.headers.host || env.TURBO_APP_SLUG+'.vertex360.co'
				}

				req.site = site
				preloaded['site'] = site
				preloaded['entity'] = site // default entity
			}

			var context = {
				site: req.site,
				cdn: (env.TURBO_ENV=='dev') ? null : env.TURBO_CDN,
			    global: req.global || {}, // global configuration for the site. see "global.json" file in "pages" directory
				vertexUser: vtxUser,
    		    preloaded: JSON.stringify(preloaded),
        		setEntity: function(entity){
          			preloaded['entity'] = entity
          			this.preloaded = JSON.stringify(preloaded)
				},
				preloadData: function(key, value){
                    preloaded[key] = value
                    this.preloaded = JSON.stringify(preloaded)
                }
			}

			req.config = context
			req.context = context
			next()
		}
	}

	// this middleware is meant to combine fetchGlobal() 
	// and setConfig() into a single function
	var setContext = function(env){
		return function(req, res, next){
            req.appSlug = req.headers['Turbo-Vertex-App']
			// var vtxUser = (req.vertexSession) ? req.vertexSession.user : null
			var vtxUser = (req.vertexSession) ? req.vertexSession.vertexUser : null
            var preloaded = {
				vertexUser: vtxUser
            }

            // initialize context object:
            var context = {
                cdn: (env.TURBO_ENV=='dev') ? null : env.TURBO_CDN,
				vertexUser: preloaded.vertexUser
            }

            // this returns null on success:
            if (utils.isValidApp(env) == null){
                var site = {
                    id: env.TURBO_APP_ID,
                    slug: env.TURBO_APP_SLUG,
                    schema: 'site',
                    url: req.headers.host || env.TURBO_APP_SLUG+'.vertex360.co'
                }

                req.site = site
                context['site'] = site
                preloaded['site'] = site
                preloaded['entity'] = site // default entity. this can also be a blog post, profile, etc
            }
            
            context['preloaded'] = JSON.stringify(preloaded)
            context['setEntity'] = function(entity){
                preloaded['entity'] = entity
                this.preloaded = JSON.stringify(preloaded)
            }

            context['preloadData'] = function(key, value){
                preloaded[key] = value
                this.preloaded = JSON.stringify(preloaded)
            }

            utils.globalConfig(env)
            .then(function(config) {
				if (config) {
					try {
						var parsed = JSON.parse(config)
						req.global = parsed
						context.global = parsed // global configuration for the site. see "global.json" file in "pages" directory
					} catch (error) {
						req.global = config
						context.global = config
					}
				} else {
					req.global = {}
					context.global = {}
				}

                req.config = context
                req.context = context
                next()
            })
            .catch(function(err) {
                req.config = context
                req.context = context
                next()
            })
		}
	}

	var verifyUser = function(pkg){
		return new Promise(function(resolve, reject){
			if (pkg.profile == null){
				reject(new Error('Missing Profile ID'))
				return
			}

			if (pkg.token == null){
				reject(new Error('Missing token'))
				return
			}

			// utils.post('https://www.vertex360.co/account/verifytoken', {profile:req.body.id, token:token})
			utils.post('https://vertex360.herokuapp.com/account/verifytoken', pkg)
			.then(function(payload) {
				if (payload.confirmation != 'success'){
					throw new Error(payload.message)
					return
				}

				resolve(payload.user)
			})
			.catch(function(err){
				reject(err)
			})
		})
	}

    var configureApp = function(app, config) {
        expressConfig(app, config)
        app.use(function(req, res, next){
            req.appSlug = req.headers['Turbo-Vertex-App']
            var preloaded = {}

            // initialize context object:
            var context = {
                cdn: (process.env.TURBO_ENV==='dev') ? null : process.env.TURBO_CDN,
            }

            // this returns null on success:
            if (utils.isValidApp(process.env) == null){
                var site = {
                    id: process.env.TURBO_APP_ID,
                    slug: process.env.TURBO_APP_SLUG,
                    schema: 'site',
                    url: req.headers.host || process.env.TURBO_APP_SLUG+'.vertex360.co'
                }

                req.site = site
                context['site'] = site
                preloaded['site'] = site
                preloaded['entity'] = site // default entity. this can also be a blog post, profile, etc
            }

            context['preloaded'] = JSON.stringify(preloaded)
            context['setEntity'] = function(entity){
                preloaded['entity'] = entity
                this.preloaded = JSON.stringify(preloaded)
            }

            context['preloadData'] = function(key, value){
                preloaded[key] = value
                this.preloaded = JSON.stringify(preloaded)
            }

            utils.globalConfig(process.env)
            .then(function(config) {
				if (config) {
					try {
						var parsed = JSON.parse(config)
						req.global = parsed
						context.global = parsed // global configuration for the site. see "global.json" file in "pages" directory
					} catch (error) {
						req.global = config
						context.global = config
					}
				} else {
					req.global = {}
					context.global = {}
				}

                req.config = context
                req.context = context
                next()
            })
            .catch(function(err) {
                req.config = context
                req.context = context
                next()
            })
        })
    }

	var client = {
		entry: entry,
		express: vertexApp,
		app: vertexApp,
		router: router,
        fetchGlobal: fetchGlobal,
        resetPage: utils.resetPage,
        setConfig: setConfig,
        setContext: setContext,
		APIRouter: APIRouter,
		Controller: Controller,
		TaskMgr: TaskMgr,
		ConfigRouter: ConfigRouter,
		nedbConfig: db.nedbConfig,
		nedb: db.nedb,
		Model: db.Model,
		utils: utils,
		verifyUser: verifyUser,
		// paypalClient: PaypalClient,
		// configureApp: expressConfig
        configureApp: configureApp
	}

	return client
}

module.exports = Microservice
