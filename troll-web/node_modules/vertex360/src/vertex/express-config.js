const express = require('express')
const path = require('path')
const logger = require('morgan')
const cookieParser = require('cookie-parser')
const bodyParser = require('body-parser')
const sessions = require('client-sessions')
const templateEngine = require('./template-engine')
const db = require('./db')

const BASE_PATH = __dirname + '/../../../../'
const CONTENT_TYPES = {
    css: 'text/css',
    js: 'text/javascript',
    png: 'image/png',
    jpg: 'image/jpeg',
    jpg: 'image/jpeg',
    gif: 'image/gif',
    txt: 'text/plain',
    json: 'application/json',
    doc: 'application/msword',
    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    epub: 'application/epub+zip',
    gz: 'application/gzip',
    ico: 'image/vnd.microsoft.icon',
    mp3: 'audio/mpeg',
    mpeg: 'video/mpeg',
    pdf: 'application/pdf',
    ppt: 'application/vnd.ms-powerpoint',
    pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    rtf: 'application/rtf',
    svg: 'image/svg+xml',
    tar: 'application/x-tar',
    tif: 'image/tiff',
    tiff: 'image/tiff',
    wav: 'audio/wav',
    woff: 'font/woff',
    woff2: 'font/woff2',
    xhtml: 'application/xhtml+xml',
    xls: 'application/vnd.ms-excel',
    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    xml: 'text/xml',
    zip: 'application/zip',
    md: 'text/markdown'
}

const configureSession = (app) => {
    const opts = app.opts
    if (!opts.session)
        return

    const cookieName = opts.session.cookieName || 'vertexSession'
    const secret = opts.session.secret || process.env.SESSION_SECRET
    const duration = opts.session.duration || 24*60*60*1000
    const activeDuration = opts.session.activeDuration || 30*60*1000

    app.use(sessions({
        cookieName: cookieName,
        secret: secret,
        duration: duration,
        activeDuration: activeDuration
    }))
}

// Default express configuration:
const configureDB = (app) => {
    const dbConfiguration = app.opts.db // can be null
    if (!dbConfiguration)
        return

    if (dbConfiguration.type == null){ // default to nedb
        db.connectNedb(dbConfiguration.url, dbConfiguration.onError, dbConfiguration.onSuccess)
        // db.connect(dbConfiguration.url, dbConfiguration.onError, dbConfiguration.onSuccess)
    }
    else if (dbConfiguration.type == 'nedb'){
        db.connectNedb(dbConfiguration.url, dbConfiguration.onError, dbConfiguration.onSuccess)
    }
    else {
        db.connectNedb(dbConfiguration.url, dbConfiguration.onError, dbConfiguration.onSuccess)
    }

    // TODO: check for postgres option
    // else if (opts.db == 'postgresql')
}

module.exports = (app, opts) => { // opts is optional
    if (app == null) // should never happen
        return

    app.opts = opts || {}
    app.use(bodyParser.json())
    app.use(bodyParser.urlencoded({extended: false}))
    app.use(cookieParser())
    app.use(logger('dev'))

    // default to mustache template engine:
    if (app.opts.viewEngine){
        app.set('view engine', app.opts.viewEngine)
        // app.engine('mustache', require('hogan-middleware').__express)
    }
    else {
        app.set('view engine', 'mustache')
        app.engine('mustache', templateEngine.__express)
        // app.engine('mustache', require('hogan-middleware').__express)
    }

    var viewsPath = (app.opts.views) ? path.join(BASE_PATH, app.opts.views) : path.join(BASE_PATH, 'views')
    app.set('views', viewsPath)

    // var staticPath = (app.opts.static) ? path.join(BASE_PATH, app.opts.static) : path.join(BASE_PATH, 'public')
    var staticDir = app.opts.static || 'public'
    var staticPath = path.join(BASE_PATH, staticDir)

    var cdnUrl = process.env['TURBO_CDN']
    if (cdnUrl!=null && process.env['TURBO_ENV']==='prod'){
        // var options = {
        //     dotfiles: 'ignore',
        //     etag: false,
        //     setHeaders: function (res, path, stat) {
        //         var redirectUrl = cdnUrl + path.replace('/var/task/'+staticDir, '')
        //         res.status(301)
        //         res.set('Location', redirectUrl)
        //         // res.set('Location', 'https://cdn.turbo360-vertex.com/exp-test-2-bxxk0d/public/images/turbo.png')
        //     }
        // }

        // app.use(express.static(staticPath, options));

        app.use(function(req, res, next){
            // var extension = req.originalUrl.split('.').pop()

            var url = req.originalUrl.split('?')[0]
            var extension = url.split('.').pop()
            var contentType = CONTENT_TYPES[extension.toLowerCase()]
            if (contentType) {
                res.redirect(cdnUrl+req.originalUrl)
                return
            }

            next()
        })
    }
    else {
        app.use(express.static(staticPath));
    }

    // app.use(express.static(path.join(__dirname, 'public')));

    if (app.opts.session != null) // {cookieName, secret, duration, activeDuration}
        configureSession(app)

    if (app.opts.db != null) // can be null
        configureDB(app)
}