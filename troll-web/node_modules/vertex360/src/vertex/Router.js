const routeMap = require('route-map') // https://www.npmjs.com/package/route-map

class Router {
	constructor(){
		this.stem = null

		this.getHandler = {
			routeMatcher: null,
			routes: {}
		}

		this.postHandler = {
			routeMatcher: null,
			routes: {}
		}

		this.putHandler = {
			routeMatcher: null,
			routes: {}
		}

		this.deleteHandler = {
			routeMatcher: null,
			routes: {}
		}
	}

	setStem(stem){
		this.stem = stem
	}

	parseRoute(event){
		let route = (event.path == '/') ? '/' : event.path.replace(this.stem, '')
		if (route.length == 0)
			route = '/'

		if (route.length > 1){ // for paths like '/test/', remove the trailing '/'
			const len = route.length-1
			const lastChar = route[len]
			if (lastChar == '/')
				route = route.substring(0, len)
		}

		return route
	}

	matchRoute(path, method){
		let routeMatcher = null
		if (method == 'get')
			routeMatcher = this.getHandler.routeMatcher
		
		if (method == 'post')
			routeMatcher = this.postHandler.routeMatcher
		
		if (method == 'put')
			routeMatcher = this.putHandler.routeMatcher
		
		if (method == 'delete')
			routeMatcher = this.deleteHandler.routeMatcher
		

		// if (this.getHandler.routeMatcher == null) // shouldn't happen
		// 	return null

		// const routeParams = this.getHandler.routeMatcher(path)
		if (routeMatcher == null) // shouldn't happen
			return null

		const routeParams = routeMatcher(path)
		if (routeParams == undefined)
			return null
		
		const routeHandler = routeParams.fn
		if (routeHandler == null)
			return null
		
		return {
			routeHandler: routeHandler,
			routeParams: routeParams
		}
	}

// - - - - - - - - - - - - - - - - - - - GET - - - - - - - - - - - - - - - - - - - - - - - - - //

	get(path, callback) { // this gets used in the route files
		this.getHandler.routes[path] = callback
		this.getHandler.routeMatcher = routeMap(this.getHandler.routes) // https://www.npmjs.com/package/route-map
	}

	handleGet(event) {
		if (this.stem == '/'){ // special edgecase for base path route:
			return this.matchRoute(event.path, 'get')
			return
		}

		if (event.path.substring(0, this.stem.length) != this.stem) // stems have to match
			return null

		return this.matchRoute(this.parseRoute(event), 'get')
	}

// - - - - - - - - - - - - - - - - - - - POST - - - - - - - - - - - - - - - - - - - - - - - - - //

	post(path, callback) { // this gets used in the route files
		this.postHandler.routes[path] = callback
		this.postHandler.routeMatcher = routeMap(this.postHandler.routes) // https://www.npmjs.com/package/route-map
	}

	handlePost(event) {
		if (this.stem == '/'){ // special edgecase for base path route:
			return this.matchRoute(event.path, 'post')
			return
		}

		if (event.path.substring(0, this.stem.length) != this.stem) // stems have to match
			return null

		return this.matchRoute(this.parseRoute(event), 'post')
	}


// - - - - - - - - - - - - - - - - - - - PUT - - - - - - - - - - - - - - - - - - - - - - - - - //

	put(path, callback) { // this gets used in the route files
		this.putHandler.routes[path] = callback
		this.putHandler.routeMatcher = routeMap(this.putHandler.routes) // https://www.npmjs.com/package/route-map
	}

	handlePut(event) {
		if (this.stem == '/'){ // special edgecase for base path route:
			return this.matchRoute(event.path, 'put')
			return
		}

		if (event.path.substring(0, this.stem.length) != this.stem) // stems have to match
			return null

		return this.matchRoute(this.parseRoute(event), 'put')
	}

// - - - - - - - - - - - - - - - - - - - DELETE - - - - - - - - - - - - - - - - - - - - - - - - - //

	delete(path, callback) { // this gets used in the route files
		this.deleteHandler.routes[path] = callback
		this.deleteHandler.routeMatcher = routeMap(this.deleteHandler.routes) // https://www.npmjs.com/package/route-map
	}

	handleDelete(event) {
		if (this.stem == '/'){ // special edgecase for base path route:
			return this.matchRoute(event.path, 'delete')
			return
		}

		if (event.path.substring(0, this.stem.length) != this.stem) // stems have to match
			return null

		return this.matchRoute(this.parseRoute(event), 'delete')
	}
}

module.exports = Router
