const fs = require('fs')
const adminRest = require('./adminRest')
const utils = require('./utils')
const BASE_DIR = __dirname + '/../../../../'

const handleTask = (restRequest) => {
    const allowedMethods = ['post']
    return new Promise((resolve, reject) => {
        if (allowedMethods.indexOf(restRequest.method) == -1){
            reject(new Error('Invalid HTTP method: ' + restRequest.method))
            return
        }

        const body = utils.parseBody(restRequest.event)
		const task = body.task
		if (task == null){
            reject(new Error('Missing task parameter'))
			return
		}

		if (task == 'resetpage'){
			const pageName = body.page
			if (pageName == null){
                reject(new Error('Missing page parameter'))
				return	
			}

			const appslug = body.appslug
			if (appslug == null){
                reject(new Error('Missing appslug parameter'))
				return	
			}

			utils.resetPage(pageName, appslug)
			.then(data => {
                resolve(data)
			})
			.catch(err => {
                reject(err)
			})
			
			return
		}

        reject(new Error('Invalid task parameter: '+task))
    })
}

module.exports = (app, event, callback) => {
    /** "/api"
        "/api/post"
        "/api/post/123" */
    const requestPath = event.path
    const parts = requestPath.split('/')
    const pathParts = []
    const method = event.httpMethod.toLowerCase() // get, post, put, delete

    parts.forEach(entry => {
        if (entry.length>0 && entry!='/')
            pathParts.push(entry)
    })

    // invalid. must be 'api'
    if (pathParts.length==0){
        // reject(new Error('invalid path. must folow /api/:resource/:id'))
        const err = new Error('invalid path. must folow /api/:resource/:id')
        callback(null, utils.generateErrorCallback(err, 500))
        return
    }

    if (pathParts[0] != 'api'){
        // reject(new Error('invalid path. must folow /api/:resource/:id'))
        const err = new Error('invalid path. must folow /api/:resource/:id')
        callback(null, utils.generateErrorCallback(err, 500))
        return
    }

    const restRequest = {method:method, event:event}
    if (pathParts.length==1){
        // requests to POST "/api" are tasks
        restRequest['type'] = (method=='post') ? 'task' : 'schema'
    }
    else if (pathParts.length==2){
        restRequest['type'] = 'collection'
        restRequest['resource'] = pathParts[1].trim().toLowerCase()				
    }
    else {
        restRequest['type'] = 'record'
        restRequest['resource'] = pathParts[1].trim().toLowerCase()
        restRequest['id'] = pathParts[2].trim() // don't lowercase this, it is case-sensitive
    }

    if (restRequest.type == 'task'){
        handleTask(restRequest)
        .then(data => {
            callback(null, utils.generateSuccessCallback(data))
        })
        .catch(err => {
            callback(null, utils.generateErrorCallback(err, 500))
        })

        return
    }

    // const controllers = app.opts.controllers || null
    if (!fs.existsSync(`${BASE_DIR}/controllers/index.js`) && !app.opts.controllers){
        // callback(null, utils.generateErrorCallback(new Error('controllers not defined. check config settings.'), 500))

        // this should not return fail because it's not "wrong" per se,
        // it just means CMS has not been integrated into project:
        callback(null, utils.generateSuccessCallback({
            found: false,
            message: 'controllers not found.'
        }))
        return
    }

    const controllers = app.opts.controllers || require(`${BASE_DIR}/controllers`)
    if (!controllers){
        // callback(null, utils.generateErrorCallback(new Error('Controllers not defined. Check config settings.'), 500))

        // this should not return fail because it's not "wrong" per se,
        // it just means CMS has not been integrated into project:
        callback(null, utils.generateSuccessCallback({
            found: false,
            message: 'Controllers not found.'
        }))
        return
    }

    adminRest(controllers, event, restRequest)
    .then(payload => {
        callback(null, utils.generateSuccessCallback(payload))
    })
    .catch(err => {
        callback(null, utils.generateErrorCallback(err, 500))
    })
}